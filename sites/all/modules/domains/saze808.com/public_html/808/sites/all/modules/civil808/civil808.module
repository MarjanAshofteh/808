<?php
include 'civil808.hook.inc';

define('PARSPAL_MERCHANT_ID', "1277902");
define('PARSPAL_PASSWORD', "jFjnTG7uQ");

/**
 * Implements hook_init().
 */
function civil808_init() {
	
}
/*
 * Implementation of hook_theme().
 */
function civil808_theme($existing, $type, $theme, $path){
  return array(
    'parspal' => array(
      'variables' => array('content' => NULL, 'payPath' => NULL),
      'template' => 'parspal', 
      'path' => drupal_get_path('module', 'civil808') .'/theme'
    )
  );
}
function add_bank_event($price, $name, $text, $user = 0, $attr = array() ) {
	$query = "INSERT INTO {bank_events} (id, user, name, value, text, date, status) VALUES (:id, :user, :name, :value, :text, :date, :status)";
	$queryParams = array(
		':id' => isset($attr['id'])?$attr['id']:NULL,
		':user' => $user,
		':name' => $name,
		':text' => $text,
		':value' => $price,
		':status' => isset($attr['status'])?$attr['status']:'pending',
		':date' => time()
		);
	$result = db_query($query, $queryParams, array('return' => Database::RETURN_INSERT_ID));
	return $result;
}

function update_bank_event($id, $status, $refnum) {
	$query = "UPDATE {bank_events} SET status = :status , date = :date, refference = :refference WHERE id = :id";
	$queryParams = array(
		':id' => $id,
		':status' => $status,
		':date' => time(),
		':refference' => $refnum
		);
	$result = db_query($query, $queryParams);
	return $result;
}

function get_bank_event($id) {
	return db_select('bank_events', 'b')->fields('b', array()) ->condition('id', $id)->execute()->fetch();
}


// function civil808_page_redirect_bank(){
// 	global $user;
//   	// some code to generate $content variable

//   	$price = 1;
//   	$name = 'shop';
//   	$text = '';


// 	add_bank_event($price, $name, $text, $user->uid);

//   echo theme('parspal', array('content'=> "jkhil", 'payPath' => 'path'));
//   die;
// }
// function civil808_page_accounting_buyfromshopresponse() {
// 	$isValid = true;
	
// 	if ($isValid) {
// 		$resNum = 0;//***
// 		$refnum = 0;//***

// 		$marchId = 0;
// 		$password = 0;

// 		$resnumber=$_GET['resnum'];
// 		$event = get_bank_event($resnumber);
// 		if ($event) {
// 			$result = parspal_receive($marchId, $password, $event->value);
// 			update_bank_event($resNum, $result['message'], $refnum);

// 			if ($result['message'] == 'success') {
// 				# SUCCESS
// 				_private_process_buys($_SESSION['buyfromshopdata']);
// 			} else {

// 			}
			
// 			drupal_goto(CIVIL_SHOP_BASE."zarinpal/processing/response&status=OK");
// 		}

			
// 	}
// }


/**
 * Implements hook_menu().
 */
function civil808_menu() {

	// $items['money/redirectbank'] = array(
	// 	'title' => 'Redirect bank',
	// 	'page callback' => 'civil808_page_redirect_bank',
	// 	'access arguments' => array('access content'),
	// 	'page arguments' => array(),
	// 	'type' => MENU_LOCAL_TASK,
	// 	);


	// event 808
	$items['admin/content/options'] = array(
		'title' => '808 Options',
		'page callback' => 'drupal_get_form',
		'access arguments' => array('bypass node access'),
		'page arguments' => array('civil808_options_808_form'),
		'description' => t('Website options'),
		'file' => 'admin.inc',
		'type' => MENU_LOCAL_TASK,
		);

	$items['admin/content/options/addoff'] = array(
		'title' => '808 Options',
		'page callback' => 'drupal_get_form',
		'access arguments' => array('bypass node access'),
		'page arguments' => array('civil808_options_addoff_808_form'),
		'description' => t('Website options'),
		'file' => 'admin.inc',
		'type' => MENU_CALLBACK,
		);

	$items['admin/content/options/deactive/%'] = array(
		'title' => '808 Options',
		'page callback' => 'drupal_get_form',
		'access arguments' => array('bypass node access'),
		'page arguments' => array('civil808_options_deactive_808_form', 4),
		'description' => t('Website options'),
		'file' => 'admin.inc',
		'type' => MENU_CALLBACK,
		);


	$items['event/%/register'] = array(
		'title' => 'Event',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('civil808_registe_event_form',1),
		'access arguments' => array('edit own main profile'),
		'type' => MENU_CALLBACK
	);

	$items['event/%/print'] = array(
		'title' => 'Print ticket',
		'page callback' => 'civil808_event_page_print',
		'page arguments' =>  array(1),
		'access arguments' => array('edit own main profile'),
		'type' => MENU_CALLBACK,
		);


	// event

	$items['user/%/myevents'] = array(
		'title' => 'My Events',
		'page callback' => 'civil808_page_my_events',
		'access arguments' => array('edit own main profile'),
		'page arguments' => array(1),
		'description' => t('My Events'),
		'type' => MENU_LOCAL_TASK,
		);
	$items['user/%/money'] = array(
		'title' => 'Accounting',
		'page callback' => 'civil808_page_accounting',
		'access arguments' => array('edit own main profile'),
		'page arguments' => array(1),
		'description' => t('Accounting'),
		'type' => MENU_LOCAL_TASK,
		);
	$items['user/%/money/charge'] = array(
		'title' => 'Accounting Charge',
		'page callback' => 'drupal_get_form',
		'access arguments' => array('edit own main profile'),
		'page arguments' => array('civil808_page_accounting_charge', 1),
		'description' => t('Accounting Charge'),
		'type' => MENU_LOCAL_ACTION,
		);
	$items['user/%/money/reward'] = array(
		'title' => 'Accounting Reward',
		'page callback' => 'drupal_get_form',
		'access arguments' => array('edit own main profile'),
		'page arguments' => array('civil808_page_accounting_reward', 1),
		'description' => t('Accounting Reward'),
		'type' => MENU_LOCAL_ACTION,
		);

	// shop action & response
	$items['money/buyfromshop/%'] = array(
		'title' => 'Accounting shop buy',
		'page callback' => 'drupal_get_form',
		'access arguments' => array('access content'),
		'page arguments' => array('civil808_page_accounting_buyfromshop',2),
		'description' => t('Accounting Shop buy'),
		'type' => MENU_CALLBACK,
		);
	// $items['money/buyfromshopresponse'] = array(
	// 	'title' => 'Accounting shop buy',
	// 	'page callback' => 'civil808_page_accounting_buyfromshopresponse',
	// 	'access arguments' => array('access content'),
	// 	'page arguments' => array(),
	// 	'description' => t('Accounting Shop buy'),
	// 	'type' => MENU_CALLBACK,
	// 	);


	$items['money/bankcallback/%/%'] = array(
		'title' => 'Accounting bank callback',
		'page callback' => 'civil808_page_accounting_bankcallback',
		'access arguments' => array('access content'),
		'page arguments' => array(2,3),
		'description' => t('Accounting bank callback'),
		'type' => MENU_CALLBACK,
		);


	$items['admin/money'] = array(
		'title' => 'Administrate money',
		'page callback' => 'civil808_page_admin_money',
		'access arguments' => array('access overlay'),
		'page arguments' => array(''),
		'description' => t('Administrate money'),
		'file' => 'admin.inc',
	    'position' => 'left',
		);
	$items['admin/money/list'] = array(
    'title' => 'Administrate money',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

	$items['admin/money/event/%'] = array(
		'title' => 'Administrate events buys',
		'page callback' => 'civil808_page_admin_money_event_buys',
		'access arguments' => array('access overlay'),
		'page arguments' => array(3),
		'description' => t('Administrate events buys'),
		'file' => 'admin.inc',
		'type' => MENU_CALLBACK,
		);
	$items['admin/money/event'] = array(
		'title' => 'Administrate events buys',
		'page callback' => 'civil808_page_admin_money_event_buys',
		'access arguments' => array('access overlay'),
		'page arguments' => array(),
		'description' => t('Administrate events buys'),
		'file' => 'admin.inc',
		'type' => MENU_LOCAL_TASK,
		);

	$items['admin/money/nodebuyes'] = array(
		'title' => 'Administrate nodebuyes',
		'page callback' => 'civil808_page_admin_money_nodebuyes',
		'access arguments' => array('access overlay'),
		'page arguments' => array(),
		'description' => t('Administrate nodebuyes'),
		'file' => 'admin.inc',
		'type' => MENU_LOCAL_TASK,
		);
	return $items;
}

function civil808_page_my_events($uid) {
	global $user;
	// if (!is_user_login()) {
		
	// }
	$query = db_select('node', 'n');
	$query->join('m_buyed_nodes', 'b', 'b.nid = n.nid');
	$query->extend('PagerDefault')->extend('TableSort')->limit(50);	
		$rows=$query->fields('n', array()) -> fields('b' , array())
		->condition('n.type', 'event')
		->condition('b.uid', $user->uid)
		->execute()
		->fetchAll();

	$table_rows = array();
	$table_header = array(
		t('Title'),
		t('Ticket'),
		t('Date'),
		t('Operations')
		);

	foreach ($rows as $row) {
		$table_rows[] = array(
			l($row->title, 'node/'.$row->nid),
			$row->value,
			format_date($row->date),
			l(t('Print'), 'event/'.$row->nid.'/print'),
			);
	}
	return theme('table', array('header'=> $table_header, 'rows' => $table_rows)).theme('pager');
}

function civil808_page_accounting($uid) {
	global $user;
	// if (!is_user_login()) {
		
	// }
	$query = db_select('bank_events', 'b');
	$query->extend('PagerDefault')->extend('TableSort')->limit(50);	
		$rows=$query->fields('b' , array())
		->condition('b.user', $user->uid)
		->execute()
		->fetchAll();

	$table_rows = array();
	$table_header = array(
		t('Type'),
		t('Price'),
		t('Date'),
		t('Status')
		);

	foreach ($rows as $row) {
		$table_rows[] = array(
			t('Bank '.$row->name),
			$row->value,
			format_date($row->date),
			t($row->status),
			);
	}
	return theme('table', array('header'=> $table_header, 'rows' => $table_rows)).theme('pager');
}
/**
 * 
 */
function civil808_page_accounting_charge($form, &$form_state, $uid) {
	global $user;
	if (!is_array($form)) {
		$form = array();
	}

	$form['text'] = array(
		'#markup' => t('charge_your_account_hint'),
		);
	$form['your_charge'] = array(
		'#prefix' => '<div>',
		'#suffix' => '</div>',
		'#markup' => '*'.t('Your current point is <strong>!point</strong>', array('!point' => userpoints_get_current_points($user->uid, 'all'))),
		);

	$form['price'] = array(
		'#type' => 'textfield',
		'#title' => t('Charge amount'),
		'#required' => TRUE,
		'#attributes' => array('placeholder' => t('Charge amount')),
		);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Charge account'),
		);
	
	return $form;
}

/**
 * validate handler for civil808_civil808_page_accounting_charge
 */
function civil808_page_accounting_charge_validate($form, &$form_state) {
if($form_state['values']['price'] < 1000) {
		form_set_error('price', t('Charge amount should be greater than 1000'));
	}
}
/**
 * Summit handler for civil808_civil808_page_accounting_charge
 */
function civil808_page_accounting_charge_submit($form, &$form_state) {
	global $user, $base_url;
	$price = intval($form_state['values']['price']);
$resnumber = time();
	$result = parspal_send(PARSPAL_MERCHANT_ID, PARSPAL_PASSWORD, $price, $resnumber, $base_url."/?q=money/bankcallback/charge/".$resnumber);
	if($result['message'] == 'success') {
		add_bank_event($price, 'charge', 'charge', $user->uid, array('id' => $result['resnum']) );
		echo theme('parspal', array('content'=> "jkhil", 'payPath' => $result['payPath']));
		die;
	} else {
		drupal_set_message(t('Oops! some error in connecting with bank please try later.'), 'error', FALSE);
	}
}

function civil808_page_accounting_bankcallback($type, $resnumber) {
	$event = get_bank_event($resnumber);
	if($event) {
		$price = $event->value;
		$result = parspal_receive($resnumber, PARSPAL_MERCHANT_ID, PARSPAL_PASSWORD, $price);
		// UPDATE DB
		update_bank_event($resnumber, $result['message'], $result['refnumber']);
		if($result['message'] == 'success') {
			if($type == 'charge') {
				drupal_set_message(t('charge transaction success'), 'status');
				$params = array(
			      'uid' => $event->user,
			      'points' => $price,
			      'operation' => t('Charge from bank'),
			    );
			    userpoints_userpointsapi($params);
			    drupal_goto();
			} else if($type == 'shop') {
				_private_process_buys($_SESSION['buyfromshopdata']);
				drupal_goto(CIVIL_SHOP_BASE."zarinpal/processing/response&status=OK");
			}
		} else {
			if($type == 'charge') {
				drupal_set_message(t('charge transaction fail'), 'error');
			    drupal_goto();
			} else if($type == 'shop') {
				drupal_goto(CIVIL_SHOP_BASE."zarinpal/processing/response&status=NO");
			}
		}
	}
}
function parspal_send($MerchantID, $Password, $Price, $ResNumber,  $ReturnPath ){
	$Description = 'جزئیات سفارش';
	$Paymenter = 'نام و نام خانوادگی کاربر';
	$Email = 'Paymenter@yahoo.com';
	$Mobile = '09127038019';
	$client = new SoapClient('http://merchant.parspal.com/WebService.asmx?wsdl');
	$res = $client->RequestPayment(array("MerchantID" => $MerchantID , "Password" =>$Password , "Price" =>$Price, "ReturnPath" =>$ReturnPath, "ResNumber" =>$ResNumber, "Description" =>$Description, "Paymenter" =>$Paymenter, "Email" =>$Email, "Mobile" =>$Mobile));
	$PayPath = $res->RequestPaymentResult->PaymentPath;
	$Status = $res->RequestPaymentResult->ResultStatus;
	if($Status == 'Succeed'){
		return array(
			'message' => 'success',
			'payPath' => $PayPath,
			'status' => $Status,
			'resnum' => $ResNumber,
			);
	}else{
		return array(
			'message' => 'fail',
			'payPath' => NULL,
			'status' => $Status,
			'resnum' => $ResNumber,
			);
	}
}
function parspal_receive($resnumber, $MerchantID, $Password, $Price){
	if(isset($_POST['status']) && $_POST['status'] == 100){
		$Status = $_POST['status'];
		$Refnumber = $_POST['refnumber'];
		$Resnumber = $_POST['resnumber'];

		$client = new SoapClient('http://merchant.parspal.com/WebService.asmx?wsdl');
		$res = $client->VerifyPayment(array("MerchantID" => $MerchantID , "Password" =>$Password , "Price" =>$Price,"RefNum" =>$Refnumber ));
		$Status = $res->verifyPaymentResult->ResultStatus;
		$PayPrice = $res->verifyPaymentResult->PayementedPrice;
		if($Status == 'success')// Your Peyment Code Only This Event
		{
			return array(
				'message'=>'success', 
				'resnumber' => $Resnumber, 
				'refnumber' => $Refnumber, 
				'price' => $PayPrice);
		}else{
			return array(
				'message'=>'fail('.$Status.')', 
				'resnumber' => -1, 
				'refnumber' => -1, 
				'price' => -1);
		}
	}else{
		return array(
				'message'=>'fail', 
				'resnumber' => -1, 
				'refnumber' => -1, 
				'price' => -1);
	};
}


/**
 * 
 */
function civil808_page_accounting_reward($form, &$form_state) {
	global $user;
	if (!is_array($form)) {
		$form = array();
	}
	$form['text'] = array(
		'#markup' => t('charge_your_account_hint'),
		);
	$form['your_charge'] = array(
		'#prefix' => '<div>',
		'#suffix' => '</div>',
		'#markup' => '*'.t('Your current point is <strong>!point</strong>', array('!point' => userpoints_get_current_points($user->uid, 'all'))),
		);

	$form['price'] = array(
		'#type' => 'textfield',
		'#title' => t('Reward amount'),
		'#required' => TRUE,
		'#attributes' => array('placeholder' => t('Reward amount')),
		);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		);
	
	return $form;
}
/**
 * Validate handler for civil808_page_accounting_reward
 */
function civil808_page_accounting_reward_validate($form, &$form_state) {
	global $user;

	$points = userpoints_get_current_points($user->uid, 'all');

	if($form_state['values']['price'] > $points)
		form_set_error('price', t('Your requested reward should be less than your points'));

	if(!is_numeric($form_state['values']['price'])) 
		form_set_error('price', t('Please enter valid amount'));
}
/**
 * Summit handler for civil808_page_accounting_reward
 */
function civil808_page_accounting_reward_submit($form, &$form_state) {
	global $user;

	$points = userpoints_get_current_points($user->uid, 'all');

	db_insert('m_reward_request')->fields(array(
		'uid' => $user->uid,
		'price' => $form_state['values']['price'],
		'date' => time(),
		'state' => 0,
		'text' => ''
		))->execute();
	drupal_set_message(t('Your request successfully saved'), 'success');

	$form_state['redirect'] = 'user/'.$user->uid.'/money';
}



/**
 * 	$data => array('price', 'email', 'orderid',)
 */
function civil808_page_accounting_buyfromshop($form, &$form_state, $data) {
	global $user;
	if (!is_array($form)) {
		$form = array();
	}
	$points = userpoints_get_current_points($user->uid, 'all');
	$datas = _decode_data($data);
	$_SESSION['buyfromshopdata'] = $data;
	// if ($user->mail != $datas['email']) {
	// 	drupal_access_denied();
	// }

	$form['text'] = array(
		'#markup' => t('You sould pay !amount to complete your buy process, you can use your points to decrese price.<br> your current points is !points', array('!amount' => intval($datas['price']), '!points' => $points)),
		);

	$form['amount'] = array(
		'#type' => 'textfield',
		'#title' => t('Points amount'),
		'#description' => t('how much points you want to use in this order'),
		'#default_value' => 0
		);

	$form['data'] = array(
		'#type' => 'hidden',
		'#value' => $data,
		); 

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('complete')
		);

	return $form;
}

/**
 * validate handler for civil808_page_accounting_buyfromshop
 */
function civil808_page_accounting_buyfromshop_validate($form, &$form_state) {
	global $user;

	$points = userpoints_get_current_points($user->uid, 'all');
	$datas = _decode_data($form_state['values']['data']);

	if($form_state['values']['amount'] > $points)
		form_set_error('amount', t('amount should less than your points'));
	if($form_state['values']['amount'] > $datas['price'])
		form_set_error('amount', t('amount should less than price'));
}
/**
 * Summit handler for civil808_page_accounting_buyfromshop
 */
function civil808_page_accounting_buyfromshop_submit($form, &$form_state) {
	global $user,$base_url;

	$points = userpoints_get_current_points($user->uid, 'all');
	$datas = _decode_data($form_state['values']['data']);
$resnumber= time();
	$result = parspal_send(PARSPAL_MERCHANT_ID, PARSPAL_PASSWORD, intval($datas['price']), $resnumber, $base_url."/?q=money/bankcallback/shop/".$resnumber);
	if($result['message'] == 'success') {
		add_bank_event(intval($datas['price']), 'shop', 'shop (orderid = '.$datas['orderid'].')', $user->uid, array('id' => $result['resnum']) );
		echo theme('parspal', array('content'=> "jkhil", 'payPath' => $result['payPath']));
		die;
	} else {
		drupal_set_message(t('Oops! some error in connecting with bank please try later.'), 'error', FALSE);
	}
	
}




function _private_process_buys($data) {
	$d = _decode_data($data);
	$percent = variable_get('shop_order_percent', 0.2);
	foreach ($d['data'] as $key => $value) {
		$price = $value['unitPrice'] * $value['qty'];
		$user = user_load_by_mail($value['email']);

		// fix price
		$price = $price - $price * $percent;

		$params = array(
	      'uid' => $user->uid,
	      'points' => $price,
	      'operation' => t('for shop product sell to sell !name' , array('!name' => $value['name']) ),
	    );
	    userpoints_userpointsapi($params);
	}
}










/**
 * 
 */
function civil808_registe_event_form($form, &$form_state, $nid) {
	global $user;
	$points = userpoints_get_current_points($user->uid, 'all');
	if (!is_array($form)) {
		$form = array();
	}
	$ticket = -1;
	$value = 0;
	if(($node = node_load($nid))) {
		$count = db_select('m_buyed_nodes','e')->fields('e', array('id'))->condition('nid', $nid)->execute()->rowCount();
		if($count >= $node->field_count['und'][0]['value']) {
			drupal_set_message(t('All tickets are selled'), 'error');
			drupal_goto('node/'.$nid);
		}
		if(isset($form_state['input']['ticket']) 
			&& isset($node->field_ticket_price['und'][$form_state['input']['ticket']-1])){
			// check copen
			$copen = false;
			if ($form_state['input']['offcode']) {
				$copen = db_select('m_off_code', 'o')
					->fields('o', array())
					->condition('code', $form_state['input']['offcode'])
					->condition('active', 1)
					->execute()->fetch();
				if(!$copen) {
					drupal_set_message(t('Please inset valid off code'), 'error');
					drupal_goto('node/'.$nid);
				}
			}


			$ticket = $form_state['input']['ticket']-1;
			$value = $node->field_ticket_price['und'][$ticket]['value'];
			$off = ($copen) ? intval($copen->price) / 100 : 0;

			if ($points * 10 < ($value - $value * $off) ) {
				drupal_set_message(t("You haven't enough point in your account, please charge your account."), 'error');
				drupal_goto('node/'.$nid);
			}
			// return drupal_get_form("event808_registe_event_form",$_POST['ticket']-1, $value, $id);
		} else {
			drupal_set_message(t('Please select a ticket!'), 'error');
			drupal_goto('node/'.$nid);
		}
	}else {
		drupal_not_found();
	}
	$form['notice'] = array(
		'#prefix' => '<div>',
		'#suffix' => '</div>',
		'#markup' => t('Are you sure to complete this action, it cuase to lose your !points points.', array('!points' => ($value - $value * $off) / 10)),
		);


	$form['confirm'] = array(
		'#type' => 'submit',
		'#value' => t('Confirm'),
		'#attributes' => array('class'=> array('btn-green'))
		);
	$form['cancel'] = array(
		'#markup' => l(t('Cancel'), 'node/'.$nid),
		);
	$form['nid'] = array(
		'#type' => 'value',
		'#value' => $nid,
		);

	$form['price'] = array(
		'#type' => 'value',
		'#value' => $value ,
		);
	$form['ticket'] = array(
		'#type' => 'hidden',
		'#value' => $ticket + 1,
		);
	$form['offcode'] = array(
		'#type' => 'hidden',
		'#value' => $form_state['input']['offcode'],
		);
	
	return $form;
}
/**
 * Validate handler for civil808_registe_event_form
 */
function civil808_registe_event_form_validate($form, &$form_state) {
	if ($form_state['values']['offcode']) {
		$row = db_select('m_off_code', 'o')
			->fields('o', array())
			->condition('code', $form_state['values']['offcode'])
			->condition('active', 1)
			->execute()->rowCount();
		if(!$row) {
			form_set_error('offcode', t('Please inset valid off code'));
		}
	}
}
/**
 * Summit handler for civil808_registe_event_form
 */
function civil808_registe_event_form_submit($form, &$form_state) {
	global $user;
	if($form_state['values']['confirm']) {
		$node = node_load($form_state['values']['nid']);
		$fields = array(
			'nid' => $form_state['values']['nid'],
			'date' => time(),
			'value' => $form_state['values']['ticket'] - 1,
			'type' => 'event',
			'uid' => $user->uid);
		if ($form_state['values']['offcode']) {
			$fields['off_code'] = $form_state['values']['offcode'];
		}
		if(db_insert('m_buyed_nodes')->fields($fields)->execute()) {

			$price = $form_state['values']['price'] / 10;

			if ($form_state['values']['offcode']) {
				$row = db_select('m_off_code', 'o')
					->fields('o', array())
					->condition('code', $form_state['values']['offcode'])
					->execute()->fetch();
				$price = $price - $price * intval($row->price) / 100;
			}
			$params = array(
			      'uid' => $user->uid,
			      'points' => -$price,
			      'operation' => t('Buy ticket for event !title', array('!title' => $node->title)),
			    );
		    userpoints_userpointsapi($params);
		}
		drupal_set_message(t('You are successfully buy a ticket for an event.<br> to print your ticket please look !events', array('!events' => l(t('My Events'), 'user/'.$user->uid.'/myevents'))), 'status');
	}
	$form_state['redirect'] = 'node/'.$form_state['values']['nid'];
}

function civil808_event_page_print($nid) {
	global $user;
	// if(!is_numeric($nid))
	// 	drupal_not_found();

	$row = db_select('m_buyed_nodes', 'b')
			->fields('b', array())
			->condition('nid', $nid)
			->condition('uid', $user->uid)
			->execute()
			->fetch();
	// if(!$row)
	// 	drupal_not_found();

	$node = node_load($nid);
	$p = profile2_load_by_user($user);

	$out = "<div style='direction:rtl; overflow:hidden; border-radius: 5px; background:#f8f8f8;padding: 10px;'>";
	$out .= "<h2>".$node->title."</h2>";
	$out .= "<div style='width:50%;float:right'>"."آدرس: "."<strong>".$node->field_address['und'][0]['value']."</strong><br/>"."</div>";
	$out .= "<div style='width:50%;float:right'>"."زمان: "."<strong>".format_date($node->field_time['und'][0]['value'], 'custom', 'D d M Y H:s')."</strong><br/></div>";
	$out .= "شماره بلیط: <strong>". $row->id."</strong><br/>";
	$out .= "به نام: <strong>".$p['main']->field_full_name['und'][0]['value']."</strong>";

	$out .= "</div>";
pdf_using_mpdf_api($out, 'ticket-'.$row->id, false);
exit;
	return $out;
}




